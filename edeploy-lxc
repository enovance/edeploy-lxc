#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright (C) 2013 eNovance SAS <licensing@enovance.com>
#
# Author: Gon√©ri Le Bouder <goneri.lebouder@enovance.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

import glob
import yaml
import subprocess
import os
import sys
import shutil
import argparse

def start_bridge():
    subprocess.call(['brctl', 'addbr', conf['network']['bridge'] ])
    subprocess.call(['ifconfig', conf['network']['bridge'], conf['network']['gateway'] ])

def stop_bridge():
    subprocess.call(['ifconfig', conf['network']['bridge'], 'down' ])
    subprocess.call(['brctl', 'delbr', conf['network']['bridge'] ])

def setup_ssh_key(conf, host):
    if not 'ssh_key' in conf['general']:
        return

    print("    setup ssh key from %s" % conf['general']['ssh_key'])
    ssh_dir = '/var/lib/lxc/%s/rootfs/root/.ssh/' % host['name']
    if not os.path.isdir(ssh_dir):
        os.makedirs(ssh_dir)
    shutil.copyfile(conf['general']['ssh_key'], ssh_dir + '/authorized_keys')

def setup_cloudinit(conf, rootfs, host):
    if 'cloudinit' in host:
        cloudinit_name = os.path.basename(host['cloudinit']).replace('.cloudinit', '')
        print("    setting cloudinit flat file datasource")
        nocloud_dir = os.path.join(rootfs, 'var/lib/cloud/seed/nocloud')
        if not os.path.exists(nocloud_dir):
            os.makedirs(nocloud_dir)
        open(os.path.join(nocloud_dir, 'user-data'), 'w').write(open(host['cloudinit']).read())
        open(os.path.join(nocloud_dir, 'meta-data'), 'w').write('local-hostname: %s' % host['name'])
        open(os.path.join(rootfs, 'etc/cloud/cloud.cfg.d/90_dpkg.cfg'), 'w').write('''
dsmod: local

datasource_list: [ NoCloud ]
''')

def get_dist(rootfs):
    checks = {
        'etc/redhat-release': {
            'centos': 'CentOS Linux release 7.0',
            'fedora': 'Fedora release'
        },
        'etc/issue': {
            'debian': 'Debian GNU/Linux 7'
        }
    }
    for discriminant, patterns in checks.items():
        path = os.path.join(rootfs, discriminant)
        if os.path.exists(path):
            content = file(path).read()
            for rel, pattern in patterns.items():
                if content.find(pattern) == 0:
                    print("    detected target is %s" % rel)
                    return rel
    raise Exception('Unsupported dist !')

def get_union_filesystem(conf):
    supported_fs = ['aufs', 'overlay']
    if 'union_fs' in conf['edeploy']:
        requested_fs = [conf['edeploy']['union_fs']]
    else:
        requested_fs = supported_fs
    all_fs = [ l.split('\t')[-1] for l in open("/proc/filesystems").read().splitlines() ]
    available_fs = [ fs for fs in requested_fs if (fs in supported_fs) and (fs in all_fs) ]
    if not available_fs:
        raise Exception('Unsupported fs: ' + ','.join(requested_fs))
    return available_fs[0]

def get_overlay_dir(conf):
    fs = get_union_filesystem(conf)
    return conf['edeploy'].get(fs + '_dir', '/tmp/base_' + fs)

def stop_one(name, upper_rw_dir):
    lxc_dir = "/var/lib/lxc/%s" % name
    try:
        # lxc-kill is deprecated
        subprocess.call(['lxc-stop', '-k', '-n', name])
    except:
        print("Failed to stop container %s" % name)

    if os.path.exists(lxc_dir):
        print("stopping %s ... " % name)
        try:
            subprocess.call(['umount', os.path.join(lxc_dir, 'rootfs') ])
        except:
            print("Failed to umount %s" % os.path.join(lxc_dir, 'rootfs'))
        shutil.rmtree(lxc_dir)

    if os.path.exists(upper_rw_dir):
        shutil.rmtree(upper_rw_dir)

def stop():
    print "Stopping all ..."
    for host in conf['hosts']:
        stop_one(host['name'], os.path.join(get_overlay_dir(conf), host['name']))
    stop_bridge()

def inner_conf(dist, rootfs, host):
    print("    Customizing target rootfs ...")
    if dist == 'debian':
        subprocess.call(['tar', 'xf', '/usr/share/debootstrap/devices.tar.gz'], cwd=rootfs)
        if not os.path.exists(rootfs + '/dev/pts'):
            os.makedirs(rootfs + '/dev/pts')
        # work around for LXC bug, rmmod module on the host system
        shutil.copyfile(rootfs + '/bin/true', rootfs + '/bin/kmod')
        debian_interfaces = os.path.join(rootfs, 'etc/network/interfaces')
        if os.path.exists(debian_interfaces):
            netFd = open(debian_interfaces, 'w')
            netFd.write("auto lo\n" +
                "iface lo inet loopback\n" +
                "auto eth0\n" +
                "iface eth0 inet static\n" +
                "    address %s\n" % host['address'] +
                "    netmask 255.255.255.0\n" +
                "    gateway %s\n" % conf['network']['gateway'])
            netFd.close()
    if dist in ['centos', 'fedora']:
        # Manage to get a login prompt with lxc-console
        path = os.path.join(rootfs, 'usr/lib/systemd/system/getty@.service')
        content = file(path).readlines()
        content = [l for l in content if l.find('ConditionPathExists=/dev/tty0') < 0]
        content.extend(['ConditionVirtualization=|lxc', 'ConditionPathExists=|/dev/tty0'])
        file(path, 'w').writelines(content)
        # Network
        fd = open(os.path.join(rootfs, 'etc/sysconfig/network-scripts/ifcfg-eth0'), 'w')
        fd.write(
            "DEVICE=eth0\n" +
            "ONBOOT=yes\n" +
            "BOOTPROTO=static\n" +
            "IPADDR=%s\n" % host['address'] +
            "NETMASK=255.255.255.0\n" +
            "GATEWAY=%s\n" % conf['network']['gateway']
        )
        fd.close()
        fd = open(os.path.join(rootfs, 'etc/sysconfig/network'), 'w')
        fd.write(
            "NETWORKING=yes\n" +
            "HOSTNAME=%s.%s\n" % (host['name'], conf['network']['domain'])
        )
        fd.close()


    file(os.path.join(rootfs, 'etc/hostname'), 'w').write(host['name'])
    hostFd = open(os.path.join(rootfs, 'etc/hosts'), 'w')
    hostFd.write(
        "127.0.0.1 %s.%s %s localhost\n" % (host['name'], conf['network']['domain'], host['name']) +
        "::1     localhost ip6-localhost ip6-loopback\n" +
        "ff02::1 ip6-allnodes\n" +
        "ff02::2 ip6-allrouters\n"
    )
    for h in conf['hosts']:
        hostFd.write("%s %s.%s %s\n" % (h['address'], h['name'], conf['network']['domain'], h['name']))

    hostFd.close()

def lxc_conf(dist, host):
    print("    Customizing lxc conf ...")
    try:
        fh = open('/var/lib/lxc/%s.config' % host['name'], 'r')
        addons = fh.read()
        fh.close()
    except (IOError, OSError) as e:
        addons = ""
    if dist == 'debian':
        lxcConfFd = open('/var/lib/lxc/%s/config' % host['name'], 'w')
        lxcConfFd.write("lxc.network.type = veth\n" +
            "lxc.network.flags = up\n" +
            "lxc.network.link = %s\n" % conf['network']['bridge'] +
            "lxc.rootfs = /var/lib/lxc/%s/rootfs\n" % host['name'] +
            "lxc.tty = 4\n" +
            "lxc.pts = 1024\n" +
            "lxc.utsname = %s\n" % host['name'] +
            "lxc.cgroup.devices.deny = a\n" +
            "lxc.cgroup.devices.allow = c 1:3 rwm\n" +
            "lxc.cgroup.devices.allow = c 1:5 rwm\n" +
            "lxc.cgroup.devices.allow = c 5:1 rwm\n" +
            "lxc.cgroup.devices.allow = c 5:0 rwm\n" +
            "lxc.cgroup.devices.allow = c 1:9 rwm\n" +
            "lxc.cgroup.devices.allow = c 1:8 rwm\n" +
            "lxc.cgroup.devices.allow = c 136:* rwm\n" +
            "lxc.cgroup.devices.allow = c 5:2 rwm\n" +
            "lxc.cgroup.devices.allow = c 254:0 rwm\n" +
            "lxc.cgroup.devices.allow = b 7:* rwm # /dev/loop\n" +
            "lxc.mount.entry = proc proc proc nodev,noexec,nosuid 0 0\n" +
            "lxc.mount.entry = sysfs sys sysfs defaults  0 0\n" +
            "lxc.cgroup.memory.limit_in_bytes = 536870912\n")
        lxcConfFd.write(addons)
        lxcConfFd.close()
    if dist in ['centos', 'fedora']:
        lxcConfFd = open('/var/lib/lxc/%s/config' % host['name'], 'w')
        lxcConfFd.write("lxc.rootfs = /var/lib/lxc/%s/rootfs\n" % host['name'] +
            "lxc.arch = x86_64\n" +
            "lxc.utsname = %s\n" % host['name'] +
            "lxc.devttydir = lxc\n" +
            "lxc.pts = 1024\n" +
            "lxc.tty = 4\n" +
            "lxc.cap.drop = mac_admin mac_override sys_time sys_module setfcap sys_nice sys_pacct sys_rawio\n" +
            "lxc.pivotdir = lxc_putold\n" +
            "lxc.hook.clone = /usr/share/lxc/hooks/clonehostname\n" +
            "lxc.cgroup.devices.deny = a\n" +
            "lxc.cgroup.devices.allow = c *:* m\n" +
            "lxc.cgroup.devices.allow = b *:* m\n" +
  	    "lxc.cgroup.devices.allow = c 1:3 rwm\n" +
    	    "lxc.cgroup.devices.allow = c 1:5 rwm\n" +
   	    "lxc.cgroup.devices.allow = c 1:7 rwm\n" +
    	    "lxc.cgroup.devices.allow = c 5:0 rwm\n" +
    	    "lxc.cgroup.devices.allow = c 5:1 rwm\n" +
    	    "lxc.cgroup.devices.allow = c 5:2 rwm\n" +
    	    "lxc.cgroup.devices.allow = c 1:8 rwm\n" +
    	    "lxc.cgroup.devices.allow = c 1:9 rwm\n" +
    	    "lxc.cgroup.devices.allow = c 136:* rwm\n" +
            "lxc.network.type = veth\n" +
            "lxc.network.link = %s\n" % conf['network']['bridge'] +
            "lxc.network.flags = up\n" +
            "lxc.autodev = 1\n" +
            "lxc.kmsg = 0\n" +
            "lxc.aa_profile = unconfined\n")
        lxcConfFd.write(addons)
        lxcConfFd.close()

def start():
    start_bridge()

    roles = []

    for host in conf['hosts']:
        print("[%s]" % host['name'])

        union_fs = get_union_filesystem(conf)
        overlay_dir = os.path.join(get_overlay_dir(conf), host['name'])
        upper_rw_dir = os.path.join(overlay_dir, 'upperdir')
        lxc_dir = "/var/lib/lxc/%s" % host['name']
        lxc_dir_rootfs = "/var/lib/lxc/%s/rootfs" % host['name']
        role_dir = os.path.join(conf['edeploy']['dir'], host['role'])

        if os.path.exists(lxc_dir):
            stop_one(host['name'], upper_rw_dir)

        os.makedirs(lxc_dir)
        os.makedirs(lxc_dir_rootfs)
        os.makedirs(upper_rw_dir)

        if union_fs == "aufs":
            subprocess.call(['mount', '-t', 'aufs', '-o', 'br=%s:%s' % (upper_rw_dir, role_dir), 'none', lxc_dir_rootfs])
        elif union_fs == "overlay":
            work_dir = os.path.join(overlay_dir, 'workdir')
            os.makedirs(work_dir)
            subprocess.call(['mount', '-t', 'overlay', '-o', 'upperdir=%s,lowerdir=%s,workdir=%s' % (upper_rw_dir, role_dir, work_dir), 'overlayfs', lxc_dir_rootfs])
        else:
            raise Exception('Neither aufs nor overlayfs are supported on this system')

        dist = get_dist(lxc_dir_rootfs)
        lxc_conf(dist, host)
        inner_conf(dist, lxc_dir_rootfs, host)
        setup_ssh_key(conf, host)
        setup_cloudinit(conf, lxc_dir_rootfs, host)

        print("    launching")
        subprocess.call(['lxc-start', '-d', '-L', '/tmp/lxc-%s.log' % host['name'], '-n', host['name'] ])

parser = argparse.ArgumentParser()
parser.add_argument('action', help='action', choices=['stop', 'start', 'restart'])
parser.add_argument('--config', help='configuration file', required=True)

args = parser.parse_args()

stream = file(args.config, 'r')
conf=yaml.load(stream)

if args.action == 'start':
    start()
elif args.action == 'stop':
    stop()
elif args.action == 'restart':
    stop()
    start()
